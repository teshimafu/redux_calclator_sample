{"version":3,"sources":["serviceWorker.ts","services/CalculatorService.ts","modules/CalculatorContainer.ts","store.ts","components/Result.tsx","components/CommonBtn.tsx","containers/CalculatorContainer.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Calculator","opt","firstNumber","secondNumber","GetAllActions","number","type","initialAppState","inputValue","temporaryValue","resultValue","showingResult","calculator","state","action","numAction","opAction","temp","lastOperation","result","undefined","rootReducer","combineReducers","store","createStore","Result","title","r","CommonBtn","character","onClick","CalculatorContainer","dispatch","useDispatch","useSelector","onNumClick","onOperationClick","App","className","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e01f6fb4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export type OPT = \"DIV\" | \"MUL\" | \"ADD\" | \"SUB\";\r\n\r\nexport const Calculator = (opt: OPT, firstNumber: number, secondNumber: number) => {\r\n  switch (opt) {\r\n    case \"DIV\":\r\n      return firstNumber / secondNumber;\r\n    case \"MUL\":\r\n      return firstNumber * secondNumber;\r\n    case \"ADD\":\r\n      return firstNumber + secondNumber;\r\n    case \"SUB\":\r\n      return firstNumber - secondNumber;\r\n    default:\r\n      return 0;\r\n  }\r\n};\r\n","import { OPT, Calculator } from \"src/services/CalculatorService\";\r\n\r\nconst INPUT_NUMBER = \"INPUT_NUMBER\";\r\nconst OPERATION = \"OPERATION\";\r\nconst EQUAL = \"EQUAL\";\r\nconst RESET = \"RESET\";\r\n\r\nconst onNumClick = (number: number) => ({\r\n  type: INPUT_NUMBER,\r\n  number\r\n});\r\n\r\nconst onOperationClick = (opt: OPT) => ({\r\n  type: OPERATION,\r\n  opt\r\n});\r\n\r\nconst onEqualClick = () => ({\r\n  type: EQUAL\r\n});\r\n\r\nconst onResetClick = () => ({\r\n  type: RESET\r\n});\r\n\r\ntype ClickActions =\r\n  | ReturnType<typeof onNumClick>\r\n  | ReturnType<typeof onOperationClick>\r\n  | ReturnType<typeof onEqualClick>\r\n  | ReturnType<typeof onResetClick>;\r\n\r\ninterface CalcState {\r\n  inputValue: number;\r\n  resultValue: number;\r\n  temporaryValue: number;\r\n  lastOperation?: OPT;\r\n  showingResult: boolean;\r\n}\r\n\r\nexport const GetAllActions = {\r\n  onNumClick: onNumClick,\r\n  onOperationClick: onOperationClick,\r\n  onEqualClick: onEqualClick,\r\n  onResetClick: onResetClick\r\n};\r\n\r\nconst initialAppState: CalcState = {\r\n  inputValue: 0,\r\n  temporaryValue: 0,\r\n  resultValue: 0,\r\n  showingResult: false\r\n};\r\n\r\nconst calculator = (state = initialAppState, action: ClickActions) => {\r\n  switch (action.type) {\r\n    case INPUT_NUMBER:\r\n      const numAction = action as ReturnType<typeof onNumClick>;\r\n      return {\r\n        ...state,\r\n        inputValue: state.inputValue * 10 + numAction.number,\r\n        showingResult: false\r\n      };\r\n    case OPERATION:\r\n      const opAction = action as ReturnType<typeof onOperationClick>;\r\n      const temp = state.lastOperation\r\n        ? Calculator(state.lastOperation, state.temporaryValue, state.inputValue)\r\n        : state.showingResult\r\n        ? state.resultValue\r\n        : state.inputValue;\r\n      return {\r\n        ...state,\r\n        inputValue: 0,\r\n        temporaryValue: temp,\r\n        resultValue: 0,\r\n        lastOperation: opAction.opt\r\n      };\r\n    case EQUAL:\r\n      if (state.showingResult) {\r\n        return state;\r\n      }\r\n      const result = state.lastOperation\r\n        ? Calculator(state.lastOperation, state.temporaryValue, state.inputValue)\r\n        : state.inputValue;\r\n      return {\r\n        ...state,\r\n        inputValue: 0,\r\n        temporaryValue: 0,\r\n        resultValue: result,\r\n        lastOperation: undefined,\r\n        showingResult: true\r\n      };\r\n    case RESET:\r\n      return initialAppState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default calculator;\r\n","import { combineReducers, createStore } from \"redux\";\r\nimport calculator from \"./modules/CalculatorContainer\";\r\n\r\n// 全てのReducerが集約される。Reducerが増えたらここに追加する\r\nexport const rootReducer = combineReducers({\r\n  calculator\r\n});\r\n\r\n// 全てのStatusが集約される。書き換え不要\r\nexport type AllState = ReturnType<typeof rootReducer>;\r\n\r\n// Reactとreduxをつなぐためのstoreを作成。書き換え不要\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\n\r\ninterface ButtonArgument {\r\n  title: string;\r\n  r: number;\r\n}\r\n\r\nconst Result = ({ title, r }: ButtonArgument) => (\r\n  <div>\r\n    {title}: <span>{r}</span>\r\n  </div>\r\n);\r\n\r\nexport default Result;\r\n","import React from \"react\";\r\n\r\ninterface ButtonArgument {\r\n  character: string | number;\r\n  onClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\r\n}\r\n\r\nconst CommonBtn = ({ character, onClick }: ButtonArgument) => <button onClick={onClick}>{character}</button>;\r\n\r\nexport default CommonBtn;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Result from \"../components/Result\";\r\nimport { GetAllActions } from \"../modules/CalculatorContainer\";\r\nimport { AllState } from \"src/store\";\r\nimport { OPT } from \"src/services/CalculatorService\";\r\nimport CommonBtn from \"src/components/CommonBtn\";\r\n\r\nexport const CalculatorContainer = () => {\r\n  const dispatch = useDispatch();\r\n  const calculator = useSelector((state: AllState) => state.calculator);\r\n  const onNumClick = (number: number) => {\r\n    dispatch(GetAllActions.onNumClick(number));\r\n  };\r\n  const onOperationClick = (opt: OPT) => {\r\n    dispatch(GetAllActions.onOperationClick(opt));\r\n  };\r\n  const onEqualClick = () => {\r\n    dispatch(GetAllActions.onEqualClick());\r\n  };\r\n  const onResetClick = () => {\r\n    dispatch(GetAllActions.onResetClick());\r\n  };\r\n  return (\r\n    <div>\r\n      <div>\r\n        <CommonBtn character={1} onClick={() => onNumClick(1)} />\r\n        <CommonBtn character={2} onClick={() => onNumClick(2)} />\r\n        <CommonBtn character={3} onClick={() => onNumClick(3)} />\r\n        <CommonBtn character={\"/\"} onClick={() => onOperationClick(\"DIV\")} />\r\n      </div>\r\n      <div>\r\n        <CommonBtn character={4} onClick={() => onNumClick(4)} />\r\n        <CommonBtn character={5} onClick={() => onNumClick(5)} />\r\n        <CommonBtn character={6} onClick={() => onNumClick(6)} />\r\n        <CommonBtn character={\"*\"} onClick={() => onOperationClick(\"MUL\")} />\r\n      </div>\r\n      <div>\r\n        <CommonBtn character={7} onClick={() => onNumClick(7)} />\r\n        <CommonBtn character={8} onClick={() => onNumClick(8)} />\r\n        <CommonBtn character={9} onClick={() => onNumClick(9)} />\r\n        <CommonBtn character={\"+\"} onClick={() => onOperationClick(\"ADD\")} />\r\n      </div>\r\n      <div>\r\n        <CommonBtn character={\"c\"} onClick={onResetClick} />\r\n        <CommonBtn character={0} onClick={() => onNumClick(0)} />\r\n        <CommonBtn character={\"=\"} onClick={onEqualClick} />\r\n        <CommonBtn character={\"-\"} onClick={() => onOperationClick(\"SUB\")} />\r\n      </div>\r\n      <Result title={\"Temporary\"} r={calculator.temporaryValue} />\r\n      <Result title={\"Result\"} r={calculator.showingResult ? calculator.resultValue : calculator.inputValue} />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { CalculatorContainer } from \"./containers/CalculatorContainer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <CalculatorContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}